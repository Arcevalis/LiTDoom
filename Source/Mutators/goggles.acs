// ACS
#library "goggles"
#include "zcommon.acs"

// Defines
#define MAXPLAYERS 8
int gogglesOn[MAXPLAYERS];
int time;

Function int Abs(int value)
{
    if (value < 0)
    {
        return -value;
    }
    return value;
}

// List of aspect ratios.
#define ASPECT_4_3 (4.0 / 3)
#define ASPECT_16_9 (16.0 / 9)
#define ASPECT_16_10 (16.0 / 10)
#define ASPECT_17_10 (17.0 / 10)
#define ASPECT_5_4 (5.0 / 4)

Function int GetAspectRatio(void)
{
    int noWideScreen = GetCVar("vid_nowidescreen");
    int tft = GetCVar("vid_tft");

    if (noWideScreen)
    {
        if (tft && GetScreenHeight() * 5 / 4 == GetScreenWidth())
        {
            return ASPECT_5_4;
        }
        return ASPECT_4_3;
    }

    // If the size is approximately 16:9, consider it so.
    if (Abs(GetScreenHeight() * 16 / 9 - GetScreenWidth()) < 10)
    {
        return ASPECT_16_9;
    }
    // Consider 17:10 as well.
    if (Abs(GetScreenHeight() * 17 / 10 - GetScreenWidth()) < 10)
    {
        return ASPECT_17_10;
    }
    // 16:10 has more variance in the pixel dimensions. Grr.
    if (Abs(GetScreenHeight() * 16 / 10 - GetScreenWidth()) < 60)
    {
        // 320x200 and 640x400 are always 4:3, not 16:10
        if ((GetScreenWidth() == 320 && GetScreenHeight() == 200) || (GetScreenWidth() == 640 && GetScreenHeight() == 400))
        {
            return ASPECT_4_3;
        }
        return ASPECT_16_10;
    }
    // Unless vid_tft is set, 1280x1024 is 4:3, not 5:4.
    if (tft && GetScreenHeight() * 5 / 4 == GetScreenWidth())
    {
        return ASPECT_5_4;
    }
    // Assume anything else is 4:3. (Which is probably wrong these days...)
    return ASPECT_4_3;
}



// Scripts
int gogglesEmpty;
int gogglesTime;

Script "getgoggleTime" (void)
{
	SetResultValue(time);
}

Script "GoggleSwitch" (void) net
{
	if (gogglesOn[PlayerNumber()])
		{
		gogglesOn[PlayerNumber()] = 0;
		LocalAmbientSound("NvgOFF",127);
		TakeInventory("PowerLightAmp2", 1);
		ACS_NamedSuspend("GoggleBattery", 0);
		}
	else
		{
		If(CheckInventory("Infrared2") && !CheckInventory("InfraredUsed"))
		{
		GiveInventory("InfraredUsed",1);
		TakeInventory("Infrared2",1);
		LocalAmbientSound("NvgON",127);
		}
		Else If(CheckInventory("InfraredUsed"))
		{
		LocalAmbientSound("NvgON",127);
		}
		gogglesOn[PlayerNumber()] = 1;
		GogglesEmpty = 0;
		}
}

Script "GogglesHandling" ENTER
{
	GogglesEmpty = 0;
	While(1)
	{
	int sae_ar = GetAspectRatio();
	SetHudSize(550,370,1);
	Until (GogglesEmpty == 1)
	{
		If(CheckInventory("InfraredUsed") && CheckInventory("PowerLightAmp2"))
		{
			If(sae_ar == ASPECT_4_3)
			{
				{
					If(gogglesTime <= 100 && gogglesTime > 75)
					{
					SETFONT("BATT100");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 530.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 75 && gogglesTime > 50)
					{
					SETFONT("BATT75");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 530.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 50 && gogglesTime > 25)
					{
					SETFONT("BATT50");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 530.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 25 && gogglesTime > 15)
					{
					SETFONT("BATT25");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 530.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 15 )
					{
					TakeInventory("PowerlightAmp2",1);
					SETFONT("BATT00");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 530.0, 200.0, 0.2, 0.5, 2.0, 0.50);
					}
					Delay(35*2);
				}
			}
			Else
			{
				{
					If(gogglesTime <= 100 && gogglesTime > 75)
					{
					SETFONT("BATT100");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 600.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 75 && gogglesTime > 50)
					{
					SETFONT("BATT75");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 600.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 50 && gogglesTime > 25)
					{
					SETFONT("BATT50");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 600.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 25 && gogglesTime > 15)
					{
					SETFONT("BATT25");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 600.0, 200.0, 1.0, 1.0, 2.0, 0.15);
					}
					Else If(gogglesTime <= 15 )
					{
					TakeInventory("PowerlightAmp2",1);
					SETFONT("BATT00");
					HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP, 0, 0, 600.0, 200.0, 0.2, 0.5, 2.0, 0.50);
					}
					Delay(35*2);
				}
			}
		}
		if (gogglesOn[PlayerNumber()])
			{
				ACS_NamedExecute("GoggleBattery",0);
			}
		Delay(1);
	}
	Delay (1);
	}
}

script "GoggleBattery" (void)
{
		If(CheckInventory("InfraredUsed"))
		{
		time = 120;
		while (time > 0 && CheckInventory("InfraredUsed"))
				{
					gogglesTime = (time-- * 100) / 120;
					GiveInventory("PowerLightAmp2", 1);
					Delay (35);
				}
		LocalAmbientSound("NvgOFF",127);
		DropInventory(0, "InfraredUsed");
		TakeInventory("PowerLightAmp2",1);
		gogglesOn[PlayerNumber()] = 0;
		Print(s:"Goggles Battery Depleted");
		Delay (1);
		GogglesEmpty = 1;
		}
		Else
		{
		Print(s:"No Goggles!");
		gogglesOn[PlayerNumber()] = 0;
		}
}

script "GoogleRecharge" (void)
{
		if (gogglesOn[PlayerNumber()])
		{
		gogglesOn[PlayerNumber()] = 0;
		LocalAmbientSound("NvgOFF",127);
		TakeInventory("PowerLightAmp2", 1);
		}
		
		ACS_Namedterminate("GoggleBattery", 0);
		TakeInventory("PowerLightAmp2",1);
		gogglesOn[PlayerNumber()] = 0;
		Print(s:"Goggles Battery Recharged");
		Delay (1);
		GogglesEmpty = 1;
		gogglesTime = 0;
		delay(1);
}